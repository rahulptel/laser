defaults:
  - _self_
  - override hydra/hydra_logging: disabled
  - override hydra/job_logging: disabled

# Tensor: PyTorch Dataset
# DMatrix: XGBoost Dataset
dtype: DMatrix
# classification: Classification
# regression: Regression
task: classification
## Classification labels
# binary: Negative samples: 0, positive samples 1
## Regression labels
# mo (margin_one): Negative samples: -1, positive samples 1
# mos(margin_one_score): Negative samples: -1, positive samples: 1+score
# nms(neg_margin_score): Negative samples: -1, positive samples: score
label: binary
num_processes: 1

# Problem parameters
prob: knapsack
num_objs: 4
num_vars: 50
size: ${num_objs}_${num_vars}
split: test
from_pid: 1100
to_pid: 1101


# C++ lib parameters
# 1: Knapsack
problem_type: 1
# Don't change this
preprocess: 0
# 0: Exact
# 1: Restricted
bdd_type: 1
# To be used when constructing restricted BDD.
# Set it to zero for exact.
maxwidth: 20
# MinWt | MaxRatio
order_type: MinWt

# Dataset parameters
neg_pos_ratio_all:
  train: 1
  val: 1
  test: -1
neg_pos_ratio: ${neg_pos_ratio_all[${split}]}
state_norm_const: 1000
layer_norm_const: 100
flag_layer_penalty: true
# layer in [0, 1], 0 for root and 1 for terminal
# const:        1
# linear:       1 - layer
# linearE:      e^(-0.5 - 1) * layer + 1
# exponential:  e^(-0.5 - layer)
# quadratic:    e^(-0.5 - 1) * layer^2 + 1
# sigmoidal:    (1 + e^(-0.5)) / (1 + e^(layer - 0.5))
layer_penalty: exponential
flag_imbalance_penalty: false
flag_importance_penalty: 1
# sum: Add all the penalties
# product: Multiply all the penalties
penalty_aggregation: sum
min_samples: 0
seed: 789541


hydra:
  output_subdir: null
  run:
    dir: .
